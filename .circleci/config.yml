
# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
## Defines images and working directory.
defaults: &defaults
  docker:
    - image: circleci/php:7.4-buster-node-browsers-legacy

# Defines the cache restore mechanism for composer dependencies.
restore_cache: &restore_cache
  # We use the composer.lock as a way to determine if we can cache our build.
  keys:
  - composer-v2-{{ checksum "composer.lock" }}
  # fallback to using the latest cache if no exact match is found
  - composer-v2

# Defines the cache saving mechanism for composer dependencies.
save_cache: &save_cache
  key: composer-v2-{{ checksum "composer.lock" }}
  paths:
    - vendor

# Defines the cache restore mechanism for node dependencies.
restore_node_cache: &restore_node_cache
  keys:
    - node-v1-{{ checksum "package.json" }}
    - node-v1-

# Defines the cache saving mechanism for node dependencies.
save_node_cache: &save_node_cache
  key: node-v1-{{ checksum "package.json" }}
  paths:
    - node_modules
    - /home/circleci/.npm

# Jobs
build_and_test: &build_and_test
  <<: *defaults
  steps:
    - checkout
    - run:
        name: Install missing packages
        command: |
          sudo apt-get update
          sudo apt-get install -y libnss3 chromium automake

    # Install Composer dependencies.
    - restore_cache: *restore_cache
    - run: composer install -n -q
    - save_cache: *save_cache

    # Install Node dependencies.
    - restore_cache: *restore_node_cache
    - run: npm install
    - save_cache: *save_node_cache

    - run:
        name: Setup any environment vars required for the build
        command: |
          if [[ -z "${CIRCLE_BRANCH}" ]]; then
            .circleci/scripts/add_env_vars_to_build.sh tagged
          else
            .circleci/scripts/add_env_vars_to_build.sh $CIRCLE_BRANCH
          fi

    - run:
        name: Run frontend test suites
        command: npm run test

    - run:
        name: Create production frontend build
        command: npm run production

    # prepare database
    - run: touch storage/testing.sqlite
    - run: php artisan key:generate --env=testing
    - run: php artisan migrate --env=testing --database=sqlite_testing --force

    # Run tests
    - run: ./vendor/bin/phpunit

    # Run linting
    - run: ./vendor/bin/phpcs

    - run: cp -rf .env.dusk.testing .env
    - run: php artisan key:generate

    - run:
        name: Run Laravel Server
        command: php artisan serve
        background: true

    - run:
        name: Run Laravel Dusk Tests
        command: |
          php artisan dusk:chrome-driver --detect
          php artisan dusk

    - persist_to_workspace:
        root: /home/circleci/project
        paths:
          - vendor/
          - public/css/
          - public/js/
          - public/fonts/
          - public/images/
          - public/icons/
          - public/mix-manifest.json

# Declare all of the jobs we should run.
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.18
  aws-white-list-circleci-ip: avvo/aws-white-list-circleci-ip@0.0.2
  shellcheck: circleci/shellcheck@1.3.15

jobs:
  build_and_test:
     <<: *build_and_test

workflows:
  build_and_test:
    jobs:
      - shellcheck/check:
          filters:
              tags:
                only: /.*/
      - build_and_test:
          requires:
            - shellcheck/check
          filters:
            tags:
              only: /.*/